heat_template_version: queens

parameters:

  external_network:
    type: string
    description: uuid of a network to use for floating ip addresses

  portal_network_cidr:
    type: string
    description: >
      address range used by kubernetes for service portals

  kube_allow_priv:
    type: string
    description: >
      whether or not kubernetes should permit privileged containers.
    constraints:
      - allowed_values: ["true", "false"]

  etcd_volume_size:
    type: number
    description: >
      size of a cinder volume to allocate for etcd storage

  docker_volume_size:
    type: number
    description: >
      size of a cinder volume to allocate to docker for container/image
      storage

  docker_storage_driver:
    type: string
    description: docker storage driver name
    default: "devicemapper"

  cgroup_driver:
    type: string
    description: >
      cgroup driver name that kubelet should use, ideally the same as
      the docker cgroup driver.
    default: "cgroupfs"

  volume_driver:
    type: string
    description: volume driver to use for container storage

  region_name:
    type: string
    description: A logically separate section of the cluster

  flannel_network_cidr:
    type: string
    description: network range for flannel overlay network

  flannel_network_subnetlen:
    type: number
    description: size of subnet assigned to each master

  flannel_backend:
    type: string
    description: >
      specify the backend for flannel, default udp backend
    constraints:
      - allowed_values: ["udp", "vxlan", "host-gw"]

  system_pods_initial_delay:
    type: number
    description: >
      health check, time to wait for system pods (podmaster, scheduler) to boot
      (in seconds)
    default: 30

  system_pods_timeout:
    type: number
    description: >
      health check, timeout for system pods (podmaster, scheduler) to answer.
      (in seconds)
    default: 5

  admission_control_list:
    type: string
    description: >
      List of admission control plugins to activate

  discovery_url:
    type: string
    description: >
      Discovery URL used for bootstrapping the etcd cluster.

  tls_disabled:
    type: boolean
    description: whether or not to enable TLS

  kube_dashboard_enabled:
    type: boolean
    description: whether or not to disable kubernetes dashboard

  influx_grafana_dashboard_enabled:
    type: boolean
    description: Enable influxdb with grafana dashboard for data from heapster

  verify_ca:
    type: boolean
    description: whether or not to validate certificate authority

  kubernetes_port:
    type: number
    description: >
      The port which are used by kube-apiserver to provide Kubernetes
      service.

  cluster_uuid:
    type: string
    description: identifier for the cluster this template is generating

  magnum_url:
    type: string
    description: endpoint to retrieve TLS certs from

  prometheus_monitoring:
    type: boolean
    description: >
      whether or not to have prometheus and grafana deployed

  fixed_subnet:
    type: string
    description: Subnet from which to allocate fixed addresses.

  network_driver:
    type: string
    description: network driver to use for instantiating container networks

  auth_url:
    type: string
    description: >
      url for kubernetes to authenticate

  username:
    type: string
    description: >
      user account

  password:
    type: string
    description: >
      user password

  http_proxy:
    type: string
    description: http proxy address for docker

  https_proxy:
    type: string
    description: https proxy address for docker

  no_proxy:
    type: string
    description: no proxies for docker

  kube_tag:
    type: string
    description: tag of the k8s containers used to provision the kubernetes cluster

  cloud_provider_tag:
    type: string
    description:
      tag of the kubernetes/cloud-provider-openstack
      https://hub.docker.com/r/k8scloudprovider/openstack-cloud-controller-manager/tags/

  cloud_provider_enabled:
    type: boolean
    description: Enable or disable the openstack kubernetes cloud provider

  etcd_tag:
    type: string
    description: tag of the etcd system container

  flannel_tag:
    type: string
    description: tag of the flannel system containers

  flannel_cni_tag:
    type: string
    description: tag of the flannel cni container

  kube_version:
    type: string
    description: version of kubernetes used for kubernetes cluster

  kube_dashboard_version:
    type: string
    description: version of kubernetes dashboard used for kubernetes cluster

  trustee_user_id:
    type: string
    description: user id of the trustee

  trustee_password:
    type: string
    description: password of the trustee
    hidden: true

  trust_id:
    type: string
    description: id of the trust which is used by the trustee
    hidden: true

  insecure_registry_url:
    type: string
    description: insecure registry url

  container_infra_prefix:
    type: string
    description: >
      prefix of container images used in the cluster, kubernetes components,
      kubernetes-dashboard, coredns etc

  etcd_lb_vip:
    type: string
    description: >
      etcd lb vip private used to generate certs on master.
    default: ""

  dns_service_ip:
    type: string
    description: >
      address used by Kubernetes DNS service

  dns_cluster_domain:
    type: string
    description: >
      domain name for cluster DNS

  ca_key:
    type: string
    description: key of internal ca for the kube certificate api manager
    hidden: true

  cert_manager_api:
    type: boolean
    description: true if the kubernetes cert api manager should be enabled
    default: false

  calico_tag:
    type: string
    description: tag of the calico containers used to provision the calico node

  calico_cni_tag:
    type: string
    description: tag of the cni used to provision the calico node

  calico_kube_controllers_tag:
    type: string
    description: tag of the kube_controllers used to provision the calico node

  calico_ipv4pool:
    type: string
    description: Configure the IP pool from which Pod IPs will be chosen

  pods_network_cidr:
    type: string
    description: Configure the IP pool/range from which pod IPs will be chosen

  ingress_controller:
    type: string
    description: >
      ingress controller backend to use

  ingress_controller_role:
    type: string
    description: >
      node role where the ingress controller should run

  octavia_ingress_controller_tag:
    type: string
    description: Octavia ingress controller docker image tag.

  kubelet_options:
    type: string
    description: >
      additional options to be passed to the kubelet

  kubeapi_options:
    type: string
    description: >
      additional options to be passed to the api

  kubecontroller_options:
    type: string
    description: >
      additional options to be passed to the controller manager

  kubeproxy_options:
    type: string
    description: >
      additional options to be passed to the kube proxy

  kubescheduler_options:
    type: string
    description: >
      additional options to be passed to the scheduler

  octavia_enabled:
    type: boolean
    description: >
      whether or not to use Octavia for LoadBalancer type service.
    default: False

  kube_service_account_key:
    type: string
    hidden: true
    description: >
      The signed cert will be used to verify the k8s service account tokens
      during authentication.

  kube_service_account_private_key:
    type: string
    hidden: true
    description: >
      The private key will be used to sign generated k8s service account
      tokens.

  prometheus_tag:
    type: string
    description: tag of prometheus container

  grafana_tag:
    type: string
    description: tag of grafana container

  heat_container_agent_tag:
    type: string
    description: tag of the heat_container_agent system container

  keystone_auth_enabled:
    type: boolean
    description: >
      true if the keystone authN and authZ should be enabled
    default:
      false

  k8s_keystone_auth_tag:
    type: string
    description: tag of the k8s_keystone_auth container

  project_id:
    type: string
    description: >
      project id of current project

  tiller_enabled:
    type: string
    description: Whether to enable tiller or not

  tiller_tag:
    type: string
    description: tag of tiller container

  tiller_namespace:
    type: string
    description: namespace where tiller will be installed

  kube_master_ip:
    type: string
    description: IP address of the Kubernetes master server.

  etcd_server_ip:
    type: string
    description: IP address of the Etcd server.

  registry_enabled:
    type: boolean
    description: >
      Indicates whether the docker registry is enabled.

  registry_port:
    type: number
    description: port of registry service

  swift_region:
    type: string
    description: region of swift service

  registry_container:
    type: string
    description: >
      name of swift container which docker registry stores images in

  registry_insecure:
    type: boolean
    description: >
      indicates whether to skip TLS verification between registry and backend storage

  registry_chunksize:
    type: number
    description: >
      size fo the data segments for the swift dynamic large objects

  template_file:
    type: string
    description: the template file to use

  node_ip_address:
    type: string
    description: the node's ip

  floating_ip_address:
    type: string
    description: the node's floating ip

  api_private_ip:
    type: string
    description: the api address

  api_public_ip:
    type: string
    description: the api address

  wait_curl_cli:
    type: string
    description: the cli to use for waing minions

resources:

  minion_wait_handle:
    type: OS::Heat::WaitConditionHandle

  minion_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: kube-minion
    properties:
      handle: {get_resource: minion_wait_handle}
      timeout: {get_param: wait_condition_timeout}

  write_heat_params:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          #template: {get_file: ../../common/templates/kubernetes/fragments/write-heat-params-master.yaml}
          template: {get_file: { get_param: template_file } }
          params:
            "$PROMETHEUS_MONITORING": {get_param: prometheus_monitoring}
            #"$KUBE_API_PUBLIC_ADDRESS": {get_attr: [api_address_switch, public_ip]}
            "$KUBE_API_PUBLIC_ADDRESS": {get_param: api_public_ip}
            #"$KUBE_API_PRIVATE_ADDRESS": {get_attr: [api_address_switch, private_ip]}
            "$KUBE_API_PRIVATE_ADDRESS": {get_param: api_private_ip}
            "$KUBE_API_PORT": {get_param: kubernetes_port}
            #"$KUBE_NODE_PUBLIC_IP": {get_attr: [kube_master_floating, floating_ip_address]}
            "$KUBE_NODE_PUBLIC_IP": {get_param: floating_ip_address}
            #"$KUBE_NODE_IP": {get_attr: [kube_master_eth0, fixed_ips, 0, ip_address]}
            "$KUBE_NODE_IP": {get_param: node_ip_address}
            "$KUBE_ALLOW_PRIV": {get_param: kube_allow_priv}
            "$ETCD_VOLUME": {get_resource: etcd_volume}
            "$ETCD_VOLUME_SIZE": {get_param: etcd_volume_size}
            "$DOCKER_VOLUME": {get_resource: docker_volume}
            "$DOCKER_VOLUME_SIZE": {get_param: docker_volume_size}
            "$DOCKER_STORAGE_DRIVER": {get_param: docker_storage_driver}
            "$CGROUP_DRIVER": {get_param: cgroup_driver}
            "$NETWORK_DRIVER": {get_param: network_driver}
            "$FLANNEL_NETWORK_CIDR": {get_param: flannel_network_cidr}
            "$FLANNEL_NETWORK_SUBNETLEN": {get_param: flannel_network_subnetlen}
            "$FLANNEL_BACKEND": {get_param: flannel_backend}
            "$SYSTEM_PODS_INITIAL_DELAY": {get_param: system_pods_initial_delay}
            "$SYSTEM_PODS_TIMEOUT": {get_param: system_pods_timeout}
            "$PODS_NETWORK_CIDR": {get_param: pods_network_cidr}
            "$PORTAL_NETWORK_CIDR": {get_param: portal_network_cidr}
            "$ADMISSION_CONTROL_LIST": {get_param: admission_control_list}
            "$ETCD_DISCOVERY_URL": {get_param: discovery_url}
            "$AUTH_URL": {get_param: auth_url}
            "$USERNAME": {get_param: username}
            "$PASSWORD": {get_param: password}
            "$CLUSTER_SUBNET": {get_param: fixed_subnet}
            "$TLS_DISABLED": {get_param: tls_disabled}
            "$KUBE_DASHBOARD_ENABLED": {get_param: kube_dashboard_enabled}
            "$INFLUX_GRAFANA_DASHBOARD_ENABLED": {get_param: influx_grafana_dashboard_enabled}
            "$VERIFY_CA": {get_param: verify_ca}
            "$CLUSTER_UUID": {get_param: cluster_uuid}
            "$MAGNUM_URL": {get_param: magnum_url}
            "$VOLUME_DRIVER": {get_param: volume_driver}
            "$REGION_NAME": {get_param: region_name}
            "$HTTP_PROXY": {get_param: http_proxy}
            "$HTTPS_PROXY": {get_param: https_proxy}
            "$NO_PROXY": {get_param: no_proxy}
            "$KUBE_TAG": {get_param: kube_tag}
            "$CLOUD_PROVIDER_TAG": {get_param: cloud_provider_tag}
            "$CLOUD_PROVIDER_ENABLED": {get_param: cloud_provider_enabled}
            "$ETCD_TAG": {get_param: etcd_tag}
            "$FLANNEL_TAG": {get_param: flannel_tag}
            "$FLANNEL_CNI_TAG": {get_param: flannel_cni_tag}
            "$KUBE_VERSION": {get_param: kube_version}
            "$KUBE_DASHBOARD_VERSION": {get_param: kube_dashboard_version}
            "$TRUSTEE_USER_ID": {get_param: trustee_user_id}
            "$TRUSTEE_PASSWORD": {get_param: trustee_password}
            "$TRUST_ID": {get_param: trust_id}
            "$INSECURE_REGISTRY_URL": {get_param: insecure_registry_url}
            "$CONTAINER_INFRA_PREFIX": {get_param: container_infra_prefix}
            "$ETCD_LB_VIP": {get_param: etcd_lb_vip}
            "$DNS_SERVICE_IP": {get_param: dns_service_ip}
            "$DNS_CLUSTER_DOMAIN": {get_param: dns_cluster_domain}
            "$CERT_MANAGER_API": {get_param: cert_manager_api}
            "$CA_KEY": {get_param: ca_key}
            "$CALICO_TAG": {get_param: calico_tag}
            "$CALICO_CNI_TAG": {get_param: calico_cni_tag}
            "$CALICO_KUBE_CONTROLLERS_TAG": {get_param: calico_kube_controllers_tag}
            "$CALICO_IPV4POOL": {get_param: calico_ipv4pool}
            "$INGRESS_CONTROLLER": {get_param: ingress_controller}
            "$INGRESS_CONTROLLER_ROLE": {get_param: ingress_controller_role}
            "$OCTAVIA_INGRESS_CONTROLLER_TAG": {get_param: octavia_ingress_controller_tag}
            "$KUBELET_OPTIONS": {get_param: kubelet_options}
            "$KUBEAPI_OPTIONS": {get_param: kubeapi_options}
            "$KUBECONTROLLER_OPTIONS": {get_param: kubecontroller_options}
            "$KUBEPROXY_OPTIONS": {get_param: kubeproxy_options}
            "$KUBESCHEDULER_OPTIONS": {get_param: kubescheduler_options}
            "$OCTAVIA_ENABLED": {get_param: octavia_enabled}
            "$KUBE_SERVICE_ACCOUNT_KEY": {get_param: kube_service_account_key}
            "$KUBE_SERVICE_ACCOUNT_PRIVATE_KEY": {get_param: kube_service_account_private_key}
            "$PROMETHEUS_TAG": {get_param: prometheus_tag}
            "$GRAFANA_TAG": {get_param: grafana_tag}
            "$HEAT_CONTAINER_AGENT_TAG": {get_param: heat_container_agent_tag}
            "$KEYSTONE_AUTH_ENABLED": {get_param: keystone_auth_enabled}
            "$K8S_KEYSTONE_AUTH_TAG": {get_param: k8s_keystone_auth_tag}
            "$PROJECT_ID": {get_param: project_id}
            "$EXTERNAL_NETWORK_ID": {get_param: external_network}
            "$TILLER_ENABLED": {get_param: tiller_enabled}
            "$TILLER_TAG": {get_param: tiller_tag}
            "$TILLER_NAMESPACE": {get_param: tiller_namespace}
            # minion specific
            "$KUBE_MASTER_IP": {get_param: kube_master_ip}
            "$ETCD_SERVER_IP": {get_param: etcd_server_ip}
            "$REGISTRY_ENABLED": {get_param: registry_enabled}
            "$REGISTRY_PORT": {get_param: registry_port}
            "$SWIFT_REGION": {get_param: swift_region}
            "$REGISTRY_CONTAINER": {get_param: registry_container}
            "$REGISTRY_INSECURE": {get_param: registry_insecure}
            "$REGISTRY_CHUNKSIZE": {get_param: registry_chunksize}
            #"$WAIT_CURL": {get_attr: [minion_wait_handle, curl_cli]}
            "$WAIT_CURL": {get_param: wait_curl_cli}

  install_openstack_ca:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $OPENSTACK_CA: {get_param: openstack_ca}
          template: {get_file: ../../common/templates/fragments/atomic-install-openstack-ca.sh}

  write_kube_os_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/write-kube-os-config.sh}

  make_cert:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/make-cert-client.sh}

  configure_docker_storage:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $configure_docker_storage_driver: {get_file: ../../common/templates/fragments/configure_docker_storage_driver_atomic.sh}
          template: {get_file: ../../common/templates/fragments/configure-docker-storage.sh}

  configure_docker_registry:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/fragments/configure-docker-registry.sh}

  configure_kubernetes_minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/configure-kubernetes-minion.sh}

  enable_services_minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/enable-services-minion.sh}

  enable_docker_registry:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/fragments/enable-docker-registry.sh}

  minion_wc_notify:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash -v
            if [ "verify_ca" == "True" ]; then
                VERIFY_CA=""
            else
                VERIFY_CA="-k"
            fi
            wc_notify $VERIFY_CA --data-binary '{"status": "SUCCESS"}'
          params:
            wc_notify: {get_attr: [minion_wait_handle, curl_cli]}
            verify_ca: {get_param: verify_ca}

  disable_selinux:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/disable-selinux.sh}

  add_proxy:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/add-proxy.sh}

  configure_etcd:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/configure-etcd.sh}

  configure_kubernetes:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/configure-kubernetes-master.sh}

  enable_services_master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/enable-services-master.sh}

  start_container_agent:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: ../../common/templates/kubernetes/fragments/start-container-agent.sh}

  kube_master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: install_openstack_ca}
        - config: {get_resource: disable_selinux}
        - config: {get_resource: write_heat_params}
        - config: {get_resource: configure_etcd}
        - config: {get_resource: write_kube_os_config}
        - config: {get_resource: configure_docker_storage}
        - config: {get_resource: configure_kubernetes}
        - config: {get_resource: make_cert}
        - config: {get_resource: add_proxy}
        - config: {get_resource: start_container_agent}
        - config: {get_resource: enable_services_master}

  kube_minion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: install_openstack_ca}
        - config: {get_resource: disable_selinux}
        - config: {get_resource: write_heat_params}
        - config: {get_resource: start_container_agent}
        - config: {get_resource: write_kube_os_config}
        - config: {get_resource: make_cert}
        - config: {get_resource: configure_docker_storage}
        - config: {get_resource: configure_docker_registry}
        - config: {get_resource: configure_kubernetes_minion}
        - config: {get_resource: add_proxy}
        - config: {get_resource: enable_services_minion}
        - config: {get_resource: enable_docker_registry}
        - config: {get_resource: minion_wc_notify}

outputs:

  master_config:
    value: {get_resource: kube_master_init}

  minion_config:
    value: {get_resource: kube_minion_init}
